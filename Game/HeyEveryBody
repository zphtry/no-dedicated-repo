using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RememberColor
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Shown(object sender, EventArgs e)
        {
            Ball ball = new Ball(Size, 1);
            KeyDown += (object kObj, KeyEventArgs kEvent) =>
            {
                if (kEvent.KeyCode == Keys.W && ball.Position>0)
                    ball.Position--;
                if (kEvent.KeyCode == Keys.S && ball.Position < 3)
                    ball.Position++;
                ball = new Ball(Size, ball.Position);
            };
            ColorWall colorWall = new ColorWall(Size, 8);
            ColorCheck colorCheck = new ColorCheck();
            int Stage = 1;
            timer1.Tick += (object tObj, EventArgs tEvent) =>
                {
                    pictureBox1.Size = new Size(Width, Height);
                    pictureBox1.Image = new Bitmap(pictureBox1.Width, pictureBox1.Height);
                    Graphics g = Graphics.FromImage(pictureBox1.Image);
                    switch (Stage)
                    {
                        case 1:
                            colorWall.coloredRectangle.ColorShape = Color.FromArgb((new Random()).Next());
                            Stage = 2;
                            break;
                        case 2:
                            colorWall.Decrement();
                            g.FillRectangle(new SolidBrush(colorWall.coloredRectangle.ColorShape), colorWall.coloredRectangle.Shape);
                            if (colorWall.coloredRectangle.Shape.X <= colorWall.Speed) Stage = 3;
                            break;
                        case 3:
                            colorCheck = new ColorCheck(colorWall.coloredRectangle.ColorShape, Size);
                            Stage = 4;
                            break;
                        case 4:
                            for (int i = 0; i < 2; ++i)
                            {
                                g.FillRectangle(new SolidBrush(colorCheck.RectangleBlock[i].ColorShape), colorCheck.RectangleBlock[i].Shape);
                                colorCheck.Decrement();
                            }
                            if (colorCheck.RectangleBlock[0].Shape.X <= ball.coloredRectangle.Shape.Width && colorCheck.RightPosition != ball.Position)
                                return;
                            if (colorCheck.RectangleBlock[0].Shape.X <= colorWall.Speed) Stage = 1;
                            break;
                    }
                    g.FillEllipse(Brushes.Black, ball.coloredRectangle.Shape);
                    pictureBox1.Refresh();
                    g.Clear(Color.White);
                };
        }
    }
    class GraphObject
    {
        public struct ColoredRectangle
        {
            public Rectangle Shape;
            public Color ColorShape;
        }
        public ColoredRectangle coloredRectangle;
        public int Speed;
        public void Decrement()
        {
            coloredRectangle.Shape.X -= Speed;
        }
    }
    class Ball : GraphObject
    {
        public int Position;
        public Ball(Size pattern, int currPos)
        {
            Position = currPos;
            coloredRectangle.Shape = new Rectangle(0, Position * pattern.Height / 3, pattern.Height / 3, pattern.Height / 3);
            coloredRectangle.ColorShape = Color.Black;
        }
    }
    class ColorWall : GraphObject
    {
        public ColorWall(Size pattern, int argSpeed)
        {
            coloredRectangle.Shape = new Rectangle(pattern.Width, 0, pattern.Width / 30, pattern.Height);
            Speed = argSpeed;
        }
    }
    class ColorCheck : GraphObject
    {
        public ColoredRectangle[] RectangleBlock;
        public int RightPosition;
        public ColorCheck(Color RightColor, Size pattern)
        {
            RectangleBlock = new ColoredRectangle[3];
            RightPosition = (new Random()).Next(0, 3);
            for (int i = 0; i < 3; ++i)
            {
                if (i == RightPosition) RectangleBlock[i].ColorShape = RightColor;
                else RectangleBlock[i].ColorShape = Color.FromArgb((new Random()).Next());
                RectangleBlock[i].Shape.X = pattern.Width;
                RectangleBlock[i].Shape.X = i * pattern.Height / 3;
            }
        }
        public ColorCheck() { }
    }
}
/*

                    ballShape.Location = new Point(ballShape.Location.X, ballShape.Location.Y - Height / 3);
                    ballShape.Location = new Point(ballShape.Location.X, ballShape.Location.Y + Height / 3);

*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RememberColor
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Shown(object sender, EventArgs e)
        {
            Ball ball = new Ball(Size, 1);
            pictureBox1.Size = new Size(Width, Height);
            pictureBox1.Image = new Bitmap(pictureBox1.Width, pictureBox1.Height);
            Graphics g = Graphics.FromImage(pictureBox1.Image);
            KeyDown += (object kObj, KeyEventArgs kEvent) =>
            {
                if (kEvent.KeyCode == Keys.W && ball.Position > 0)
                    ball.Position--;
                if (kEvent.KeyCode == Keys.S && ball.Position < 3)
                    ball.Position++;
                ball = new Ball(Size, ball.Position);
                g.FillEllipse(Brushes.Black, ball.coloredRectangle.Shape);
                pictureBox1.Refresh();
                g.Clear(Color.White);
            };
        }
    }
    class GraphObject
    {
        public struct ColoredRectangle
        {
            public Rectangle Shape;
            public Color ColorShape;
        }
        public ColoredRectangle coloredRectangle;
    }
    class Ball : GraphObject
    {
        public int Position;
        public Ball(Size pattern, int currPos)
        {
            Position = currPos;
            coloredRectangle.Shape = new Rectangle(0, Position * pattern.Height / 3, pattern.Height / 3, pattern.Height / 3);
            coloredRectangle.ColorShape = Color.Black;
        }
    }
}



        PictureBox[] Test;



            Test = new PictureBox[3] { Test1, Test2, Test3 };
            for (int i = 0; i < 3; ++i)
            {
                Test[i].Size = new Size(Giving.Width, HeightPer3);
                Test[i].Location = new Point(Width, Square.Margin.Top + i * HeightPer3);
            }
            
